from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponse
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from django.contrib.auth.models import User, Group
from django.core.mail import send_mail
from django.conf import settings
from django.core.signing import TimestampSigner, BadSignature
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.utils.encoding import force_bytes, force_str
from django.contrib.auth.tokens import default_token_generator
from django.contrib.auth.decorators import login_required, user_passes_test
from django.core.validators import validate_email
from django.core.exceptions import ValidationError
from django.utils import timezone
from datetime import timedelta
from django.contrib.auth.password_validation import validate_password
import logging
from .models import Intern, TrainingProgram, Task, Notification, Performance, Feedback, Department, Project, Attendance, Report, Event,Recruitment,JobPost,Candidate,Interview,CandidateEvaluation,UserPermission,Integration,Report
from django import forms
from .utils import get_user_groups_context
from .forms import RecruitmentForm
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from .forms import InterviewForm

logger = logging.getLogger(__name__)

# H√†m g·ª≠i email x√°c th·ª±c t√†i kho·∫£n
def send_activation_email(user, request):
    try:
        signer = TimestampSigner()
        token = signer.sign(user.email)
        uid = urlsafe_base64_encode(force_bytes(user.pk))
        activation_link = f"http://{request.get_host()}/activate/{uid}/{token}/"
        
        subject = 'K√≠ch ho·∫°t t√†i kho·∫£n c·ªßa b·∫°n'
        message = f'Xin ch√†o {user.username},\n\nVui l√≤ng nh·∫•p v√†o li√™n k·∫øt d∆∞·ªõi ƒë√¢y ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n c·ªßa b·∫°n:\n\n{activation_link}\n\nN·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒëi·ªÅu n√†y, vui l√≤ng b·ªè qua email n√†y.'
        send_mail(subject, message, settings.EMAIL_HOST_USER, [user.email])
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i email k√≠ch ho·∫°t: {str(e)}")
        raise

# H√†m g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
def send_password_reset_email(user, request):
    try:
        uid = urlsafe_base64_encode(force_bytes(user.pk))
        token = default_token_generator.make_token(user)
        reset_link = f"http://{request.get_host()}/reset-password/{uid}/{token}/"
        
        subject = 'Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u'
        message = f'Xin ch√†o {user.username},\n\nB·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Vui l√≤ng nh·∫•p v√†o li√™n k·∫øt d∆∞·ªõi ƒë√¢y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:\n\n{reset_link}\n\nN·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒëi·ªÅu n√†y, vui l√≤ng b·ªè qua email n√†y.'
        send_mail(subject, message, settings.EMAIL_HOST_USER, [user.email])
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: {str(e)}")
        raise

@login_required
def home(request):
    active_interns = Intern.objects.filter(is_active=True).count()
    training_programs = TrainingProgram.objects.count()
    completed_tasks = Task.objects.filter(status='completed').count()
    total_tasks = Task.objects.count()
    remaining_tasks = total_tasks - completed_tasks
    completion_rate = (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0
    latest_notifications = Notification.objects.all().order_by('-created_at')[:5]

    completed_training_programs = TrainingProgram.objects.filter(status='completed').count()
    remaining_training_programs = training_programs - completed_training_programs

    context = {
        'completed_training_programs': completed_training_programs,
        'remaining_training_programs': remaining_training_programs,
        'completed_tasks': completed_tasks,
        'remaining_tasks': remaining_tasks,
        'active_interns': active_interns,
        'training_programs': training_programs,
        'completion_rate': completion_rate,
        'latest_notifications': latest_notifications,
    }
    # Th√™m th√¥ng tin nh√≥m ng∆∞·ªùi d√πng v√†o context
    context.update(get_user_groups_context(request.user))
    return render(request, 'home/index.html', context)

# Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† HR kh√¥ng
def is_hr(user):
    return user.groups.filter(name='HR Managers').exists()

@login_required
@user_passes_test(lambda u: is_hr(u) or u.is_superuser)
def quanlituyendung(request):
    # X·ª≠ l√Ω form t·∫°o chi·∫øn d·ªãch tuy·ªÉn d·ª•ng
    if request.method == 'POST':
        form = RecruitmentForm(request.POST)
        if form.is_valid():
            recruitment = form.save(commit=False)
            recruitment.posted_by = request.user
            recruitment.full_clean()  # G·ªçi clean ƒë·ªÉ ki·ªÉm tra validation
            recruitment.save()
            messages.success(request, '‚úÖ T·∫°o chi·∫øn d·ªãch th√†nh c√¥ng!')
            return redirect('quanlituyendung')
        else:
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f"üö® {field}: {error}")
    else:
        form = RecruitmentForm()

    # X·ª≠ l√Ω ph√¢n trang danh s√°ch chi·∫øn d·ªãch tuy·ªÉn d·ª•ng
    recruitments_list = Recruitment.objects.all().order_by('-posted_date')
    paginator = Paginator(recruitments_list, 10)  # 10 items per page
    page = request.GET.get('page')
    
    try:
        recruitments = paginator.page(page)
    except PageNotAnInteger:
        recruitments = paginator.page(1)
    except EmptyPage:
        recruitments = paginator.page(paginator.num_pages)

    # X·ª≠ l√Ω t√¨m ki·∫øm v√† l·ªçc ·ª©ng vi√™n
    candidates = Candidate.objects.all()
    candidate_search = request.GET.get('candidateSearch', '')
    candidate_filter = request.GET.get('candidateFilter', 'all')

    # T√¨m ki·∫øm ·ª©ng vi√™n theo t√™n
    if candidate_search:
        candidates = candidates.filter(name__icontains=candidate_search)

    # L·ªçc ·ª©ng vi√™n theo tr·∫°ng th√°i
    if candidate_filter == 'new':
        candidates = candidates.filter(status='new')
    elif candidate_filter == 'interviewed':
        candidates = candidates.filter(status='interviewed')

    # Ph√¢n trang danh s√°ch ·ª©ng vi√™n
    candidate_paginator = Paginator(candidates, 10)  # 10 ·ª©ng vi√™n m·ªói trang
    candidate_page = request.GET.get('candidate_page')
    try:
        candidates = candidate_paginator.page(candidate_page)
    except PageNotAnInteger:
        candidates = candidate_paginator.page(1)
    except EmptyPage:
        candidates = candidate_paginator.page(candidate_paginator.num_pages)

    # Chu·∫©n b·ªã context
    context = {
        'form': form,
        'recruitments': recruitments,
        'candidates': candidates,
        'candidate_search': candidate_search,
        'candidate_filter': candidate_filter,
    }
    context.update(get_user_groups_context(request.user))
    
    return render(request, 'Quanlituyendung/quanlituyendung.html', context)

# Trang l·ªãch ph·ªèng v·∫•n (ch·ªâ HR, Admin, v√† Internship Coordinators)
@user_passes_test(lambda u: is_hr(u) or u.groups.filter(name='Internship Coordinators').exists() or u.is_superuser)
def lichphongvan(request):
    context = get_user_groups_context(request.user)
    return render(request, 'Lichphongvan/lichphongvan.html', context)

# Trang ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o (ch·ªâ HR, Admin, v√† Internship Coordinators)
@user_passes_test(lambda u: is_hr(u) or u.groups.filter(name='Internship Coordinators').exists() or u.is_superuser)
def chuongtrinhdaotao(request):
    context = get_user_groups_context(request.user)
    return render(request, 'Chuongtrinhdaotao/chuongtrinhdaotao.html', context)

# Trang theo d√µi hi·ªáu su·∫•t (ch·ªâ HR, Admin, Mentors, v√† Internship Coordinators)
@user_passes_test(lambda u: is_hr(u) or u.groups.filter(name='Mentors').exists() or u.groups.filter(name='Internship Coordinators').exists() or u.is_superuser)
def theodoihieusuat(request):
    context = get_user_groups_context(request.user)
    return render(request, 'Theodoihieusuat/theodoihieusuat.html', context)

# Trang giao ti·∫øp v√† ph·∫£n h·ªìi (T·∫•t c·∫£ ng∆∞·ªùi d√πng)
def giaotiepvaphanhoi(request):
    context = get_user_groups_context(request.user)
    return render(request, 'Giaotiepvaphanhoi/giaotiepvaphanhoi.html', context)

# Trang qu·∫£n l√Ω h·ªì s∆° (ch·ªâ HR, Admin, v√† Internship Coordinators)
@user_passes_test(lambda u: is_hr(u) or u.groups.filter(name='Internship Coordinators').exists() or u.is_superuser)
def quanlyhoso(request):
    context = get_user_groups_context(request.user)
    return render(request, 'Quanlyhoso/quanlyhoso.html', context)

# Trang b√°o c√°o v√† ph√¢n t√≠ch (ch·ªâ HR v√† Admin)
@user_passes_test(lambda u: is_hr(u) or u.is_superuser)
def baocaovaphantich(request):
    context = get_user_groups_context(request.user)
    return render(request, 'Baocaovaphantich/baocaovaphantich.html', context)

# Trang c·∫•u h√¨nh h·ªá th·ªëng (ch·ªâ admin)
@user_passes_test(lambda u: u.is_superuser)
def cauhinhhethong(request):
    context = get_user_groups_context(request.user)
    return render(request, 'Cauhinhhethong/cauhinhhethong.html', context)

# Trang b·∫£o m·∫≠t v√† quy·ªÅn h·∫°n (ch·ªâ admin)
@user_passes_test(lambda u: u.is_superuser)
def baomatvaquyenhan(request):
    context = get_user_groups_context(request.user)
    return render(request, 'baomatvaquyenhan/baomatvaquyenhan.html', context)

# Trang h·ªì s∆° c√° nh√¢n (y√™u c·∫ßu ƒëƒÉng nh·∫≠p)
@login_required
def myprofile(request):
    context = get_user_groups_context(request.user)
    return render(request, 'home/myprofile/myprofile.html', context)

# Trang b√°o c√°o (y√™u c·∫ßu ƒëƒÉng nh·∫≠p)
@login_required
def reports(request):
    context = get_user_groups_context(request.user)
    return render(request, 'home/reports/reports.html', context)

# Trang h·ªó tr·ª£
def helpvasupport(request):
    context = get_user_groups_context(request.user)
    return render(request, 'home/HelpvaSupport/helpvasupport.html', context)

# ƒêƒÉng xu·∫•t
def logout_view(request):
    logout(request)
    response = redirect('login')
    response.delete_cookie('sessionid')
    return response

# ƒêƒÉng nh·∫≠p
def login_view(request):
    if request.user.is_authenticated:
        return redirect('home')

    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        remember_me = request.POST.get('rememberMe')

        user = authenticate(request, username=username, password=password)
        if user is not None:
            if user.is_active:
                login(request, user)
                if remember_me:
                    request.session.set_expiry(30 * 24 * 60 * 60)
                else:
                    request.session.set_expiry(0)
                return redirect('home')
            else:
                messages.error(request, 'T√†i kho·∫£n c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ k√≠ch ho·∫°t.')
                return redirect('login')
        else:
            messages.error(request, 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng. Vui l√≤ng th·ª≠ l·∫°i.')
            return redirect('login')

    return render(request, 'home/login.html')

# ƒêƒÉng k√Ω
def register_view(request):
    if request.method == 'POST':
        full_name = request.POST.get('fullName')
        email = request.POST.get('email')
        password = request.POST.get('password')
        confirm_password = request.POST.get('confirmPassword')

        if password != confirm_password:
            messages.error(request, 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp. Vui l√≤ng th·ª≠ l·∫°i.')
            return redirect('register')

        try:
            validate_email(email)
        except ValidationError:
            messages.error(request, 'Email kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p email ƒë√∫ng ƒë·ªãnh d·∫°ng.')
            return redirect('register')

        if User.objects.filter(email=email).exists():
            messages.error(request, 'Email ƒë√£ t·ªìn t·∫°i. Vui l√≤ng s·ª≠ d·ª•ng email kh√°c.')
            return redirect('register')

        try:
            user = User.objects.create_user(username=email, email=email, password=password)
            user.first_name = full_name
            user.is_active = False
            user.save()
            send_activation_email(user, request)
            messages.success(request, 'T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ k√≠ch ho·∫°t.')
            return redirect('login')
        except Exception as e:
            messages.error(request, f'L·ªói khi t·∫°o t√†i kho·∫£n: {str(e)}')
            return redirect('register')

    return render(request, 'home/register.html')

# X√°c th·ª±c t√†i kho·∫£n
def activate_account(request, uidb64, token):
    try:
        uid = force_str(urlsafe_base64_decode(uidb64))
        user = User.objects.get(pk=uid)
        signer = TimestampSigner()
        email = signer.unsign(token, max_age=86400)
        
        if user.email == email:
            user.is_active = True
            user.save()
            messages.success(request, 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t. Vui l√≤ng ƒëƒÉng nh·∫≠p.')
            return redirect('login')
        else:
            messages.error(request, 'Li√™n k·∫øt k√≠ch ho·∫°t kh√¥ng h·ª£p l·ªá.')
            return redirect('home')
    except (TypeError, ValueError, OverflowError, User.DoesNotExist, BadSignature, ValidationError):
        messages.error(request, 'Li√™n k·∫øt k√≠ch ho·∫°t kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.')
        return redirect('home')

# Qu√™n m·∫≠t kh·∫©u
def forgot_password_view(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        try:
            validate_email(email)
        except ValidationError:
            messages.error(request, 'Email kh√¥ng h·ª£p l·ªá.')
            return redirect('forgot_password')

        try:
            user = User.objects.get(email=email)
            send_password_reset_email(user, request)
            messages.success(request, 'H∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n.')
            return redirect('login')
        except User.DoesNotExist:
            messages.error(request, 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y.')
    
    return render(request, 'home/forgot_password.html')

# ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
def reset_password(request, uidb64, token):
    try:
        uid = force_str(urlsafe_base64_decode(uidb64))
        user = User.objects.get(pk=uid)
        
        if default_token_generator.check_token(user, token):
            if request.method == 'POST':
                password = request.POST.get('password')
                confirm_password = request.POST.get('confirmPassword')
                
                if password == confirm_password:
                    try:
                        validate_password(password, user)
                        user.set_password(password)
                        user.save()
                        messages.success(request, 'M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p.')
                        return redirect('login')
                    except ValidationError as e:
                        messages.error(request, f'M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá: {", ".join(e.messages)}')
                else:
                    messages.error(request, 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp.')
            return render(request, 'home/reset_password.html')
        else:
            messages.error(request, 'Li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá.')
            return redirect('home')
    except (TypeError, ValueError, OverflowError, User.DoesNotExist):
        messages.error(request, 'Li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá.')
        return redirect('home')

# Qu·∫£n l√Ω th√¥ng b√°o
@login_required
def notification_list(request):
    notifications = Notification.objects.filter(user=request.user).order_by('-created_at')
    context = get_user_groups_context(request.user)
    context['notifications'] = notifications
    return render(request, 'home/notification_list.html', context)

@login_required
def mark_notification_as_read(request, pk):
    notification = get_object_or_404(Notification, pk=pk, user=request.user)
    notification.is_read = True
    notification.save()
    return redirect('notification_list')

@login_required
def delete_notification(request, pk):
    notification = get_object_or_404(Notification, pk=pk, user=request.user)
    notification.delete()
    return redirect('notification_list')

# Qu·∫£n l√Ω c√¥ng vi·ªác
@login_required
def task_list(request):
    tasks = Task.objects.filter(assigned_to=request.user).order_by('-created_at')
    context = get_user_groups_context(request.user)
    context['tasks'] = tasks
    return render(request, 'home/task_list.html', context)

@login_required
def task_detail(request, pk):
    task = get_object_or_404(Task, pk=pk, assigned_to=request.user)
    context = get_user_groups_context(request.user)
    context['task'] = task
    return render(request, 'home/task_detail.html', context)

@login_required
def task_create(request):
    class TaskForm(forms.Form):  # T·∫°o form tr·ª±c ti·∫øp trong view
        title = forms.CharField(max_length=255)
        description = forms.CharField(widget=forms.Textarea)
        status = forms.ChoiceField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed')])
        priority = forms.ChoiceField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')])

    if request.method == 'POST':
        form = TaskForm(request.POST)
        if form.is_valid():
            title = form.cleaned_data['title']
            description = form.cleaned_data['description']
            status = form.cleaned_data['status']
            priority = form.cleaned_data['priority']
            Task.objects.create(
                title=title,
                description=description,
                status=status,
                priority=priority,
                assigned_to=request.user
            )
            messages.success(request, 'C√¥ng vi·ªác ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.')
            return redirect('task_list')
    else:
        form = TaskForm()
    context = get_user_groups_context(request.user)
    context['form'] = form
    return render(request, 'home/task_form.html', context)

@login_required
def task_update(request, pk):
    task = get_object_or_404(Task, pk=pk, assigned_to=request.user)
    class TaskForm(forms.Form):  # T·∫°o form tr·ª±c ti·∫øp trong view
        title = forms.CharField(max_length=255, initial=task.title)
        description = forms.CharField(widget=forms.Textarea, initial=task.description)
        status = forms.ChoiceField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed')], initial=task.status)
        priority = forms.ChoiceField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], initial=task.priority)

    if request.method == 'POST':
        form = TaskForm(request.POST)
        if form.is_valid():
            task.title = form.cleaned_data['title']
            task.description = form.cleaned_data['description']
            task.status = form.cleaned_data['status']
            task.priority = form.cleaned_data['priority']
            task.save()
            messages.success(request, 'C√¥ng vi·ªác ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.')
            return redirect('task_list')
    else:
        form = TaskForm()
    context = get_user_groups_context(request.user)
    context['form'] = form
    return render(request, 'home/task_form.html', context)

@login_required
def task_delete(request, pk):
    task = get_object_or_404(Task, pk=pk, assigned_to=request.user)
    task.delete()
    messages.success(request, 'C√¥ng vi·ªác ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.')
    return redirect('task_list')

# Qu·∫£n l√Ω ph·∫£n h·ªìi
@login_required
def feedback_list(request):
    feedbacks = Feedback.objects.filter(intern__user=request.user).order_by('-feedback_date')
    context = get_user_groups_context(request.user)
    context['feedbacks'] = feedbacks
    return render(request, 'home/feedback_list.html', context)

@login_required
def feedback_detail(request, pk):
    feedback = get_object_or_404(Feedback, pk=pk, intern__user=request.user)
    context = get_user_groups_context(request.user)
    context['feedback'] = feedback
    return render(request, 'home/feedback_detail.html', context)

@login_required
def feedback_create(request):
    class FeedbackForm(forms.Form):  # T·∫°o form tr·ª±c ti·∫øp trong view
        content = forms.CharField(widget=forms.Textarea)

    if request.method == 'POST':
        form = FeedbackForm(request.POST)
        if form.is_valid():
            content = form.cleaned_data['content']
            Feedback.objects.create(
                content=content,
                intern=Intern.objects.get(user=request.user)
            )
            messages.success(request, 'Ph·∫£n h·ªìi c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng.')
            return redirect('feedback_list')
    else:
        form = FeedbackForm()
    context = get_user_groups_context(request.user)
    context['form'] = form
    return render(request, 'home/feedback_form.html', context)

# Qu·∫£n l√Ω h·ªì s∆° c√° nh√¢n
@login_required
def update_profile(request):
    intern = Intern.objects.get(user=request.user)
    class InternForm(forms.Form):  # T·∫°o form tr·ª±c ti·∫øp trong view
        first_name = forms.CharField(max_length=100, initial=intern.first_name)
        last_name = forms.CharField(max_length=100, initial=intern.last_name)
        email = forms.EmailField(initial=intern.email)
        phone = forms.CharField(max_length=15, initial=intern.phone)
        address = forms.CharField(widget=forms.Textarea, initial=intern.address)
        date_of_birth = forms.DateField(initial=intern.date_of_birth)
        university = forms.CharField(max_length=200, initial=intern.university)
        major = forms.CharField(max_length=200, initial=intern.major)
        avatar = forms.ImageField(required=False)

    if request.method == 'POST':
        form = InternForm(request.POST, request.FILES)
        if form.is_valid():
            intern.first_name = form.cleaned_data['first_name']
            intern.last_name = form.cleaned_data['last_name']
            intern.email = form.cleaned_data['email']
            intern.phone = form.cleaned_data['phone']
            intern.address = form.cleaned_data['address']
            intern.date_of_birth = form.cleaned_data['date_of_birth']
            intern.university = form.cleaned_data['university']
            intern.major = form.cleaned_data['major']
            if form.cleaned_data['avatar']:
                intern.avatar = form.cleaned_data['avatar']
            intern.save()
            messages.success(request, 'H·ªì s∆° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.')
            return redirect('myprofile')
    else:
        form = InternForm()
    context = get_user_groups_context(request.user)
    context['form'] = form
    return render(request, 'home/update_profile.html', context)

@login_required
def view_badges(request):
    context = get_user_groups_context(request.user)
    return render(request, 'home/view_badges.html', context)

@login_required
def start_remaining_tasks(request):
    remaining_tasks = Task.objects.exclude(status='completed')
    context = get_user_groups_context(request.user)
    context['remaining_tasks'] = remaining_tasks
    return render(request, 'home/start_remaining_tasks.html', context)

# Qu·∫£n l√Ω ƒëi·ªÉm danh
@login_required
def attendance_list(request):
    attendances = Attendance.objects.all()
    context = get_user_groups_context(request.user)
    context['attendances'] = attendances
    return render(request, 'home/attendance_list.html', context)

@login_required
def attendance_detail(request, pk):
    attendance = get_object_or_404(Attendance, pk=pk)
    context = get_user_groups_context(request.user)
    context['attendance'] = attendance
    return render(request, 'home/attendance_detail.html', context)

# Qu·∫£n l√Ω ƒëi·ªÉm danh
@login_required
def attendance_create(request):
    context = get_user_groups_context(request.user)  # Kh·ªüi t·∫°o context

    if request.method == 'POST':
        # X·ª≠ l√Ω form t·∫°o m·ªõi ƒëi·ªÉm danh
        pass
    else:
        # Hi·ªÉn th·ªã form t·∫°o m·ªõi
        pass
    return render(request, 'home/attendance_form.html', context)

@login_required
def attendance_update(request, pk):
    attendance = get_object_or_404(Attendance, pk=pk)
    context = get_user_groups_context(request.user)  # Kh·ªüi t·∫°o context
    context['attendance'] = attendance  # Th√™m th√¥ng tin ƒëi·ªÉm danh v√†o context

    if request.method == 'POST':
        # X·ª≠ l√Ω form c·∫≠p nh·∫≠t ƒëi·ªÉm danh
        pass
    else:
        # Hi·ªÉn th·ªã form c·∫≠p nh·∫≠t
        pass
    return render(request, 'home/attendance_form.html', context)

@login_required
def attendance_delete(request, pk):
    attendance = get_object_or_404(Attendance, pk=pk)
    attendance.delete()
    messages.success(request, 'ƒêi·ªÉm danh ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.')
    return redirect('attendance_list')

# Qu·∫£n l√Ω s·ª± ki·ªán
@login_required
def event_list(request):
    events = Event.objects.all()
    context = get_user_groups_context(request.user)
    context['events'] = events
    return render(request, 'home/event_list.html', context)

@login_required
def event_detail(request, pk):
    event = get_object_or_404(Event, pk=pk)
    context = get_user_groups_context(request.user)
    context['event'] = event
    return render(request, 'home/event_detail.html', context)

# Qu·∫£n l√Ω s·ª± ki·ªán
@login_required
def event_create(request):
    context = get_user_groups_context(request.user)  # Kh·ªüi t·∫°o context

    if request.method == 'POST':
        # X·ª≠ l√Ω form t·∫°o m·ªõi s·ª± ki·ªán
        pass
    else:
        # Hi·ªÉn th·ªã form t·∫°o m·ªõi
        pass
    return render(request, 'home/event_form.html', context)

@login_required
def event_update(request, pk):
    event = get_object_or_404(Event, pk=pk)
    context = get_user_groups_context(request.user)  # Kh·ªüi t·∫°o context
    context['event'] = event  # Th√™m th√¥ng tin s·ª± ki·ªán v√†o context

    if request.method == 'POST':
        # X·ª≠ l√Ω form c·∫≠p nh·∫≠t s·ª± ki·ªán
        pass
    else:
        # Hi·ªÉn th·ªã form c·∫≠p nh·∫≠t
        pass
    return render(request, 'home/event_form.html', context)

@login_required
def event_delete(request, pk):
    event = get_object_or_404(Event, pk=pk)
    event.delete()
    messages.success(request, 'S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.')
    return redirect('event_list')

# Qu·∫£n l√Ω b√°o c√°o
@login_required
def report_list(request):
    reports = Report.objects.filter(user=request.user)
    context = get_user_groups_context(request.user)
    context['reports'] = reports
    return render(request, 'home/report_list.html', context)

@login_required
def report_detail(request, pk):
    report = get_object_or_404(Report, pk=pk, user=request.user)
    context = get_user_groups_context(request.user)
    context['report'] = report
    return render(request, 'home/report_detail.html', context)

# Qu·∫£n l√Ω hi·ªáu su·∫•t
@login_required
def performance_list(request):
    performances = Performance.objects.filter(intern__user=request.user).order_by('-evaluation_date')
    context = get_user_groups_context(request.user)
    context['performances'] = performances
    return render(request, 'home/performance_list.html', context)

@login_required
def performance_detail(request, pk):
    performance = get_object_or_404(Performance, pk=pk, intern__user=request.user)
    context = get_user_groups_context(request.user)
    context['performance'] = performance
    return render(request, 'home/performance_detail.html', context)

@login_required
def enroll_training_program(request, pk):
    program = get_object_or_404(TrainingProgram, pk=pk)

@user_passes_test(lambda u: is_hr(u) or u.is_superuser)
def edit_recruitment(request, pk):
    recruitment = get_object_or_404(Recruitment, pk=pk)
    if request.method == 'POST':
        form = RecruitmentForm(request.POST, instance=recruitment)
        if form.is_valid():
            form.save()
            messages.success(request, 'Chi·∫øn d·ªãch tuy·ªÉn d·ª•ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.')
            return redirect('quanlituyendung')
    else:
        form = RecruitmentForm(instance=recruitment)
    
    context = get_user_groups_context(request.user)
    context['form'] = form
    return render(request, 'Quanlituyendung/edit_recruitment.html', context)

@user_passes_test(lambda u: is_hr(u) or u.is_superuser)
def delete_recruitment(request, pk):
    recruitment = get_object_or_404(Recruitment, pk=pk)
    recruitment.delete()
    messages.success(request, 'Chi·∫øn d·ªãch tuy·ªÉn d·ª•ng ƒë√£ ƒë∆∞·ª£c x√≥a.')
    return redirect('quanlituyendung')

@login_required
def create_job_post(request):
    if request.method == 'POST':
        title = request.POST.get('jobPostTitle')
        description = request.POST.get('jobPostDescription')
        platform = request.POST.get('jobPostPlatform')

        # Ki·ªÉm tra xem c√°c tr∆∞·ªùng b·∫Øt bu·ªôc c√≥ ƒë∆∞·ª£c ƒëi·ªÅn hay kh√¥ng
        if not title:
            messages.error(request, 'Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.')
            return redirect('quanlituyendung')
        if not platform:
            messages.error(request, 'N·ªÅn t·∫£ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.')
            return redirect('quanlituyendung')

        # T·∫°o JobPost v√† l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
        try:
            JobPost.objects.create(
                title=title,
                description=description,
                platform=platform,
                posted_by=request.user
            )
            messages.success(request, 'B√†i ƒëƒÉng tuy·ªÉn d·ª•ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.')
        except Exception as e:
            messages.error(request, f'L·ªói khi t·∫°o b√†i ƒëƒÉng: {str(e)}')

        return redirect('quanlituyendung')
    
@login_required
def manage_candidates(request):
    candidates = Candidate.objects.all()
    context = {
        'candidates': candidates,
    }
    return render(request, 'Lichphongvan/manage_candidates.html', context)


@login_required
def evaluate_candidate(request):
    if request.method == 'POST':
        candidate_id = request.POST.get('candidateEvaluation')
        score = request.POST.get('evaluationScore')
        comments = request.POST.get('candidateEvaluation')
        candidate = Candidate.objects.get(id=candidate_id)
        CandidateEvaluation.objects.create(
            candidate=candidate,
            evaluator=request.user,
            score=score,
            comments=comments
        )
        messages.success(request, 'ƒê√°nh gi√° ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng.')
        return redirect('quanlituyendung')
    
@login_required
def generate_report(request):
    if request.method == 'POST':
        report_type = request.POST.get('reportType')
        content = request.POST.get('reportContent')
        Report.objects.create(
            report_type=report_type,
            generated_by=request.user,
            content=content
        )
        messages.success(request, 'B√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.')
        return redirect('quanlituyendung')
    
@login_required
def integrate_system(request):
    if request.method == 'POST':
        system = request.POST.get('integrationSystem')
        Integration.objects.create(
            system=system,
            integrated_by=request.user
        )
        messages.success(request, 'H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c t√≠ch h·ª£p th√†nh c√¥ng.')
        return redirect('quanlituyendung')
    
@login_required
def manage_permissions(request):
    if request.method == 'POST':
        user_id = request.POST.get('userRole')
        role = request.POST.get('userRole')
        permission = request.POST.get('userPermissions')
        try:
            user = User.objects.get(id=user_id)
            group, created = Group.objects.get_or_create(name=role)
            user.groups.add(group)
            messages.success(request, f'Quy·ªÅn truy c·∫≠p c·ªßa {user.username} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.')
        except User.DoesNotExist:
            messages.error(request, 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.')
        return redirect('quanlituyendung')  # Chuy·ªÉn h∆∞·ªõng v·ªÅ trang qu·∫£n l√Ω tuy·ªÉn d·ª•ng
    return render(request, 'manage_permissions.html')  # Hi·ªÉn th·ªã form qu·∫£n l√Ω quy·ªÅn truy c·∫≠p

def create_recruitment(request):
    if request.method == 'POST':
        position = request.POST.get('position')
        description = request.POST.get('description')
        requirements = request.POST.get('requirements')
        deadline = request.POST.get('deadline')
        
        try:
            Recruitment.objects.create(
                position=position,
                description=description,
                requirements=requirements,
                deadline=deadline,
                posted_by=request.user
            )
            messages.success(request, 'Chi·∫øn d·ªãch tuy·ªÉn d·ª•ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.')
        except Exception as e:
            messages.error(request, f'L·ªói khi t·∫°o chi·∫øn d·ªãch: {str(e)}')
        
        return redirect('quanlituyendung')
    
@login_required
def manage_candidates(request):
    candidates = Candidate.objects.all()

    # T√¨m ki·∫øm
    candidate_search = request.GET.get('candidateSearch', '')
    if candidate_search:
        candidates = candidates.filter(name__icontains=candidate_search)

    # L·ªçc
    candidate_filter = request.GET.get('candidateFilter', 'all')
    if candidate_filter == 'new':
        candidates = candidates.filter(status='new')
    elif candidate_filter == 'interviewed':
        candidates = candidates.filter(status='interviewed')

    # Ph√¢n trang
    paginator = Paginator(candidates, 10)  # 10 ·ª©ng vi√™n m·ªói trang
    page_number = request.GET.get('page')
    candidates = paginator.get_page(page_number)

    context = {
        'candidates': candidates,
        'candidate_search': candidate_search,
        'candidate_filter': candidate_filter,
    }
    return render(request, 'manage_candidates.html', context)

@login_required
def schedule_interview(request):
    if request.method == 'POST':
        form = InterviewForm(request.POST)
        if form.is_valid():
            interview = form.save(commit=False)
            interview.interviewer = request.user
            interview.save()
            messages.success(request, 'L·ªãch ph·ªèng v·∫•n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!')
            return redirect('schedule_interview')
    else:
        form = InterviewForm()

    candidates = Candidate.objects.all()
    context = {
        'form': form,
        'candidates': candidates,
        'is_hr_manager': request.user.groups.filter(name='HR Managers').exists(),
        'is_internship_coordinator': request.user.groups.filter(name='Internship Coordinators').exists(),
        'is_admin': request.user.is_superuser,
    }
    return render(request, 'Lichphongvan/lichphongvan.html', context)

@login_required
def evaluate_candidate(request, candidate_id):
    candidate = get_object_or_404(Candidate, id=candidate_id)

    if request.method == 'POST':
        evaluation_score = request.POST.get('evaluationScore')
        comments = request.POST.get('candidateEvaluation')

        # T·∫°o ƒë√°nh gi√° ·ª©ng vi√™n
        CandidateEvaluation.objects.create(
            candidate=candidate,
            evaluator=request.user,
            score=evaluation_score,
            comments=comments
        )
        messages.success(request, 'ƒê√°nh gi√° ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng.')
        return redirect('manage_candidates')

    return redirect('manage_candidates') 

@login_required
def interview_list(request):
    interviews = Interview.objects.all().order_by('-interview_date')
    context = {
        'interviews': interviews,
    }
    return render(request, 'Lichphongvan/lichphongvan.html', context)

@login_required
def edit_interview(request, pk):
    interview = get_object_or_404(Interview, pk=pk)
    if request.method == 'POST':
        form = InterviewForm(request.POST, instance=interview)
        if form.is_valid():
            form.save()
            messages.success(request, 'L·ªãch ph·ªèng v·∫•n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!')
            return redirect('schedule_interview')
    else:
        form = InterviewForm(instance=interview)

    context = {
        'form': form,
    }
    return render(request, 'Lichphongvan/edit_interview.html', context)

@login_required
def delete_interview(request, pk):
    interview = get_object_or_404(Interview, pk=pk)
    if request.method == 'POST':
        interview.delete()
        messages.success(request, 'L·ªãch ph·ªèng v·∫•n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!')
        return redirect('schedule_interview')

    context = {
        'interview': interview,
    }
    return render(request, 'Lichphongvan/delete_interview.html', context)